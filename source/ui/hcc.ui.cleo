(ns hcc.ui)
(require 'hcc.graphics)
(alias 'g 'hcc.graphics)

(def fonts (atom nil))


(def main-palette
  {:primary [74 149 221]
   :secondary [255 100 72]
   :tertiary [255 180 72]
   :quateriary [65 229 121]
   :hightlight [255 255 255]
   :text [0 0 0]})

(def main-palette
  {:primary [255 100 72 255]
   :secondary [108 198 74 255]
   :black [0 0 0 255]})

(def main-ui
  [{:type :shape
    :origin [20 20]
    :color :primary
    :primitives [{:type :arc
                  :origin [390 220]
                  :extents [370 220]
                  :center [-10 0]
                  :radius 100
                  :inverted? :true}
                 {:type :arc
                  :origin [0 220]
                  :extents [370 220]
                  :center [380 0]
                  :radius 100
                  :inverted? :true}]}
   {:type :shape
    :origin [20 240]
    :color :secondary
    :primitives [{:type :arc
                  :extents [760 220]
                  :center [380 0]
                  :radius 80}]}
   {:type :label
    :font :small
    :text "2457-24567-246724567-24567823567-24-5672457"
    :origin [30 400]
    :extents [40 40]
    :text-color :black
    :color :primary}
   {:type :label
    :font :big
    :text "DEVICE CONTROL CENTER             71286"
    :origin [30 15]
    :extents [10 10]
    :text-color :primary
    :color :black}
   {:type :label
    :font :small
    :text "[left-bottom]"
    :origin [20 90]
    :extents [100 40]
    :text-color :black
    :text-align :left
    :text-valign :bottom
    :color :secondary}
   {:type :label
    :font :small
    :text "[left-center]"
    :origin [20 140]
    :extents [100 40]
    :text-color :black
    :text-align :left
    :text-valign :center
    :color :secondary}
   {:type :label
    :font :small
    :text "[left-top]"
    :origin [20 190]
    :extents [100 40]
    :text-color :black
    :text-align :left
    :text-valign :top
    :color :secondary}
   {:type :label
    :font :small
    :text "[center-bottom]"
    :origin [130 90]
    :extents [100 40]
    :text-color :black
    :text-align :center
    :text-valign :bottom
    :color :secondary}
   {:type :label
    :font :small
    :text "[center-center]"
    :origin [130 140]
    :extents [100 40]
    :text-color :black
    :text-align :center
    :text-valign :center
    :color :secondary}
   {:type :label
    :font :small
    :text "[center-top]"
    :origin [130 190]
    :extents [100 40]
    :text-color :black
    :text-align :center
    :text-valign :top
    :color :secondary}
   {:type :label
    :font :small
    :text "[right-bottom]"
    :origin [240 90]
    :extents [100 40]
    :text-color :black
    :text-align :right
    :text-valign :bottom
    :color :secondary}
   {:type :label
    :font :small
    :text "[right-center]"
    :origin [240 140]
    :extents [100 40]
    :text-color :black
    :text-align :right
    :text-valign :center
    :color :secondary}
   {:type :label
    :font :small
    :text "[right-top]"
    :origin [240 190]
    :extents [100 40]
    :text-color :black
    :text-align :right
    :text-valign :top
    :color :secondary}])


(defn v2+ [[x1 y1] [x2 y2]] [(+ x1 x2) (+ y1 y2)])


(defn align-text [text align valign [origin-x origin-y] [width height]]
  (let [origin-x (cond
                   (= align :center) (+ origin-x (/ width 2))
                   (= align :right) (+ origin-x width)
                   :else origin-x)
        origin-y (cond
                   (= valign :center) (+ origin-y (/ height 2))
                   (= valign :top) (+ origin-y height)
                   :else origin-y)]
    {:text-anchor ({:center :center, :right :right} align :left)
     :text-vanchor ({:center :center, :top :top} valign :bottom) ; TODO: use hash-set
     :origin [origin-x origin-y]}))


(def ui-renderers
  {:shape (fn [palette {:keys [origin color primitives]}]
            (let [color (palette color)]
              (map (fn [p] (assoc p
                                  :color color
                                  :origin (v2+ (p :origin [0 0]) origin)))
                   primitives)))
   :label (fn [palette {:keys [origin extents color font text text-color text-align text-valign]}]
            (let [color (palette color)
                  text-color (palette text-color)]
              [{:type :rect
                :origin origin
                :extents extents
                :color color}
               (merge {:type :text
                       :font font
                       :text text
                       :color color
                       :text-color text-color}
                      (align-text text text-align text-valign origin extents))]))})


(defn mapcatv [f coll]
  (loop [s (seq coll)
         out []]
    (if s
      (recur (next s) (concati out (f (first s))))
      out)))


(defn render-primitives [palette ui]
  (mapcatv (fn [elem]
             ((ui-renderers (:type elem)) palette elem))
           ui))


(def renderers
  {:arc (fn [{[origin-x origin-y] :origin
              [width height] :extents
              [r g b] :color
              [center-x center-y] :center
              :keys [radius inverted?]}]
          (g/arc! origin-x origin-y (+ origin-x width) (+ origin-y height) r g b (+ origin-x center-x) (+ origin-y center-y) radius (if inverted? -1 1)))
   :rect (fn [{[origin-x origin-y] :origin
               [width height] :extents
               [r g b] :color}]
           (g/rect! origin-x origin-y (+ origin-x width) (+ origin-y height) r g b))
   :text (fn [{[origin-x origin-y] :origin
               [tr tg tb ta] :text-color
               [r g b] :color
               :keys [font text text-anchor text-vanchor]}]
           (if @fonts
             (g/text! (@fonts font)
                      text
                      origin-x origin-y
                      ({:center 0, :right 1} text-anchor -1) ({:center 0, :top 1} text-vanchor -1)
                      tr tg tb ta
                      r g b)))})


(defn render-scene! [scene]
  (doseq [elem scene]
    ((renderers (:type elem)) elem))
  (g/render!))


(defn load-fonts [] {:big (g/load-font "/usr/share/fonts/truetype/tt0105m.ttf" 32)
                     :small (g/load-font "/usr/share/fonts/truetype/tt0105m.ttf" 11)})


(defn render-for! [n]
  (dotimes [i n]
    (g/clear!)
    (render-scene! (render-primitives main-palette main-ui))
    (g/swap-buffers!)))

(defn main []
   (g/initialize!)
   (render-for! 1)
   (println "initialized display" (g/get-display-width) "x" (g/get-display-height))
   (reset! fonts (load-fonts))
   (println "loaded fonts")
   (render-for! 200)
   (g/shutdown!)
   (println "done"))
