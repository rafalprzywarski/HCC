(ns hcc.app)
(require 'hcc.ui)
(alias 'ui 'hcc.ui)


(def app-state (atom {:counter 0}))


(def font-path "assets/Swiss 911 Ultra Compressed BT.ttf")
(def fonts
  [{:name :big :path font-path :size 32}
   {:name :small :path font-path :size 12}
   {:name :tiny :path font-path :size 9}])


(def main-palette
  {:primary [74 149 221]
   :secondary [255 100 72]
   :tertiary [255 180 72]
   :quateriary [65 229 121]
   :highlight [255 255 255]
   :text [0 0 0]})


(def main-palette
  {:primary [255 100 72]
   :secondary [108 198 74]
   :black [0 0 0]
   :highlight [255 255 255]})


(defn inc-counter [state]
  (update state :counter inc))


(defn dec-counter [state]
  (update state :counter dec))


(defn hightlight-counter [state]
  (assoc state :counter-highlight :true))


(defn dim-counter [state]
  (dissoc state :counter-highlight))


(defn counter [{:keys [counter counter-highlight]}]
  [[:shape {:origin [20 240]
            :color (if counter-highlight :highlight :secondary)
            :primitives [{:type :arc
                          :extents [760 220]
                          :center [380 0]
                          :radius 80}]}]
   [:label {:origin [370 240]
            :extents [60 60]
            :color (if counter-highlight :highlight :secondary)
            :text-color :black
            :text (str counter)
            :font :big
            :text-align :center
            :text-valign :center}]])


(def main-ui
  [[:shape {:origin [20 20]
            :color :primary
            :primitives [{:type :arc
                          :origin [390 220]
                          :extents [370 220]
                          :center [-10 0]
                          :radius 100
                          :inverted? :true}]}]
   [counter]
   [:label {:font :small
            :text "2457-24567-246724567-24567823567-24-5672457"
            :origin [180 430]
            :extents [400 30]
            :text-valign :baseline-center
            :text-color :black
            :color :primary}]
   [:label {:font :big
            :text "DEVICE CONTROL CENTER             71286"
            :origin [30 15]
            :extents [10 10]
            :text-color :primary
            :color :black}]
   [:label {:font :tiny
            :text "LEFT-BOTTOM"
            :origin [20 90]
            :extents [100 40]
            :text-color :black
            :text-align :left
            :text-valign :baseline
            :margin 2
            :color :secondary}]
   [:label {:font :tiny
            :text "LEFT-CENTER"
            :origin [20 140]
            :extents [100 40]
            :text-color :black
            :text-align :left
            :text-valign :baseline-center
            :margin 2
            :color :secondary}]
   [:label {:font :tiny
            :text "LEFT-TOP"
            :origin [20 190]
            :extents [100 40]
            :text-color :black
            :text-align :left
            :text-valign :top
            :margin 2
            :color :secondary}]
   [:label {:font :tiny
            :text "CENTER-BOTTOM"
            :origin [130 90]
            :extents [100 40]
            :text-color :black
            :text-align :center
            :text-valign :baseline
            :margin 2
            :color :secondary}]
   [:label {:font :tiny
            :text "CENTER"
            :origin [130 140]
            :extents [100 40]
            :text-color :black
            :text-align :center
            :text-valign :baseline-center
            :margin 2
            :color :secondary}]
   [:label {:font :tiny
            :text "CENTER-TOP"
            :origin [130 190]
            :extents [100 40]
            :text-color :black
            :text-align :center
            :text-valign :top
            :margin 2
            :color :secondary}]
   [:label {:font :tiny
            :text "RIGHT-BOTTOM"
            :origin [240 90]
            :extents [100 40]
            :text-color :black
            :text-align :right
            :text-valign :baseline
            :margin 2
            :color :secondary}]
   [:label {:font :tiny
            :text "RIGHT-CENTER"
            :origin [240 140]
            :extents [100 40]
            :text-color :black
            :text-align :right
            :text-valign :baseline-center
            :margin 2
            :color :secondary}]
   [:label {:id :sample-button
            :font :tiny
            :text "RIGHT-TOP"
            :origin [240 190]
            :extents [100 40]
            :text-color :black
            :text-align :right
            :text-valign :top
            :margin 2
            :color :secondary}]
   [:button {:id :sample-button
             :font :small
             :text "742-5625"
             :origin [400 80]
             :extents [200 60]
             :text-color :black
             :text-align :right
             :text-valign :baseline
             :margin 2
             :color :primary
             :on-touch-down hightlight-counter
             :on-touch-lost dim-counter
             :on-touch-up dim-counter
             :on-click dec-counter}]
   [:button {:id :sample-button2
             :button-style :rounded
             :font :small
             :text "226-7322"
             :origin [400 150]
             :extents [200 60]
             :text-color :black
             :text-align :right
             :text-valign :baseline
             :margin 2
             :color :primary
             :on-touch-down hightlight-counter
             :on-touch-lost dim-counter
             :on-touch-up dim-counter
             :on-click inc-counter}]
   [:top-left-swept {:origin [20 390]
                     :extents [160 70]
                     :inner-radius 40
                     :color :primary}]
   [:shape {:origin [20 290]
            :color :primary
            :primitives [{:type :rect
                          :extents [120 100]}]}]])


(defmacro time [expr]
  `(let [start# (get-time)
         tmp# ~expr]
     (- (get-time) start#)))


(defn main-loop-for! [n]
  (let [t (time (dotimes [i n]
                  (reset! app-state (ui/step! main-palette main-ui @app-state))))]
    (println (/ t n) "ns per frame")))


(defn main []
  (ui/initialize! 1)
  (main-loop-for! 1)
  (ui/load-fonts! fonts)
  (main-loop-for! 200)
  (ui/shutdown!))
